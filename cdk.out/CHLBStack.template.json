{
 "Resources": {
  "CHLBSecurityGroupD4E81CDE": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Allow SSH, LB, and backend traffic",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "SSH access",
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Load Balancer port",
      "FromPort": 5000,
      "IpProtocol": "tcp",
      "ToPort": 5000
     },
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Backend app port",
      "FromPort": 8080,
      "IpProtocol": "tcp",
      "ToPort": 8080
     }
    ],
    "VpcId": "vpc-0af5da03412be250b"
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/CHLBSecurityGroup/Resource"
   }
  },
  "EC2RoleF978FC1C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonS3ReadOnlyAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/CloudWatchAgentServerPolicy"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/EC2Role/Resource"
   }
  },
  "EC2RoleDefaultPolicy64E44857": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ec2:DescribeInstances",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::cdk-hnb659fds-assets-231545823700-us-east-1"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::cdk-hnb659fds-assets-231545823700-us-east-1/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EC2RoleDefaultPolicy64E44857",
    "Roles": [
     {
      "Ref": "EC2RoleF978FC1C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/EC2Role/DefaultPolicy/Resource"
   }
  },
  "EC2InstanceProfile": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "InstanceProfileName": "CHLBStack-ec2-profile",
    "Roles": [
     {
      "Ref": "EC2RoleF978FC1C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/EC2InstanceProfile"
   }
  },
  "Backend1InstanceRole9F570CD5": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "CHLBStack/Backend1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend1/InstanceRole/Resource"
   }
  },
  "Backend1InstanceProfile72F98172": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "Backend1InstanceRole9F570CD5"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend1/InstanceProfile"
   }
  },
  "Backend1A3ACC892": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": "us-east-1a",
    "IamInstanceProfile": {
     "Ref": "EC2InstanceProfile"
    },
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "t3.micro",
    "KeyName": "Projectdemo",
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "CHLBSecurityGroupD4E81CDE",
       "GroupId"
      ]
     }
    ],
    "SubnetId": "subnet-0646c4672d51c90c2",
    "Tags": [
     {
      "Key": "Name",
      "Value": "Backend-1"
     },
     {
      "Key": "Role",
      "Value": "CHLBBackend"
     }
    ],
    "UserData": {
     "Fn::Base64": "#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\nyum update -y || true\namazon-linux-extras enable python3.8 -y || true\nyum install -y python3 unzip amazon-cloudwatch-agent\npip3 install flask flask-cors requests pymongo boto3 'urllib3<1.27'\ncat <<'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json\n{\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\"file_path\": \"/home/ec2-user/backend.log\", \"log_group_name\": \"CHLB_BackendLogs\", \"log_stream_name\": \"Backend-1\"}\n        ]\n      }\n    }\n  }\n}\nEOF\n/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\naws s3 cp s3://cdk-hnb659fds-assets-231545823700-us-east-1/e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e.zip /home/ec2-user/scripts.zip\ncd /home/ec2-user\nunzip -o scripts.zip\nSERVER_NAME=Backend-1 nohup python3 /home/ec2-user/backend_app.py > /home/ec2-user/backend.log 2>&1 &"
    }
   },
   "DependsOn": [
    "Backend1InstanceRole9F570CD5"
   ],
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend1/Resource"
   }
  },
  "Backend2InstanceRoleAAD12628": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "CHLBStack/Backend2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend2/InstanceRole/Resource"
   }
  },
  "Backend2InstanceProfileC1C1F9D5": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "Backend2InstanceRoleAAD12628"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend2/InstanceProfile"
   }
  },
  "Backend2A4DC1969": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": "us-east-1a",
    "IamInstanceProfile": {
     "Ref": "EC2InstanceProfile"
    },
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "t3.micro",
    "KeyName": "Projectdemo",
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "CHLBSecurityGroupD4E81CDE",
       "GroupId"
      ]
     }
    ],
    "SubnetId": "subnet-0646c4672d51c90c2",
    "Tags": [
     {
      "Key": "Name",
      "Value": "Backend-2"
     },
     {
      "Key": "Role",
      "Value": "CHLBBackend"
     }
    ],
    "UserData": {
     "Fn::Base64": "#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\nyum update -y || true\namazon-linux-extras enable python3.8 -y || true\nyum install -y python3 unzip amazon-cloudwatch-agent\npip3 install flask flask-cors requests pymongo boto3 'urllib3<1.27'\ncat <<'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json\n{\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\"file_path\": \"/home/ec2-user/backend.log\", \"log_group_name\": \"CHLB_BackendLogs\", \"log_stream_name\": \"Backend-2\"}\n        ]\n      }\n    }\n  }\n}\nEOF\n/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\naws s3 cp s3://cdk-hnb659fds-assets-231545823700-us-east-1/e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e.zip /home/ec2-user/scripts.zip\ncd /home/ec2-user\nunzip -o scripts.zip\nSERVER_NAME=Backend-2 nohup python3 /home/ec2-user/backend_app.py > /home/ec2-user/backend.log 2>&1 &"
    }
   },
   "DependsOn": [
    "Backend2InstanceRoleAAD12628"
   ],
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend2/Resource"
   }
  },
  "Backend3InstanceRole7FA01FFF": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "CHLBStack/Backend3"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend3/InstanceRole/Resource"
   }
  },
  "Backend3InstanceProfile466BB2ED": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "Backend3InstanceRole7FA01FFF"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend3/InstanceProfile"
   }
  },
  "Backend317D5C7E7": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": "us-east-1a",
    "IamInstanceProfile": {
     "Ref": "EC2InstanceProfile"
    },
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "t3.micro",
    "KeyName": "Projectdemo",
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "CHLBSecurityGroupD4E81CDE",
       "GroupId"
      ]
     }
    ],
    "SubnetId": "subnet-0646c4672d51c90c2",
    "Tags": [
     {
      "Key": "Name",
      "Value": "Backend-3"
     },
     {
      "Key": "Role",
      "Value": "CHLBBackend"
     }
    ],
    "UserData": {
     "Fn::Base64": "#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\nyum update -y || true\namazon-linux-extras enable python3.8 -y || true\nyum install -y python3 unzip amazon-cloudwatch-agent\npip3 install flask flask-cors requests pymongo boto3 'urllib3<1.27'\ncat <<'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json\n{\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\"file_path\": \"/home/ec2-user/backend.log\", \"log_group_name\": \"CHLB_BackendLogs\", \"log_stream_name\": \"Backend-3\"}\n        ]\n      }\n    }\n  }\n}\nEOF\n/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\naws s3 cp s3://cdk-hnb659fds-assets-231545823700-us-east-1/e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e.zip /home/ec2-user/scripts.zip\ncd /home/ec2-user\nunzip -o scripts.zip\nSERVER_NAME=Backend-3 nohup python3 /home/ec2-user/backend_app.py > /home/ec2-user/backend.log 2>&1 &"
    }
   },
   "DependsOn": [
    "Backend3InstanceRole7FA01FFF"
   ],
   "Metadata": {
    "aws:cdk:path": "CHLBStack/Backend3/Resource"
   }
  },
  "LBInstanceInstanceRole41DC12B8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "CHLBStack/LBInstance"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/LBInstance/InstanceRole/Resource"
   }
  },
  "LBInstanceInstanceProfileA1C73FD3": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "LBInstanceInstanceRole41DC12B8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/LBInstance/InstanceProfile"
   }
  },
  "LBInstance138DE3A0": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": "us-east-1a",
    "IamInstanceProfile": {
     "Ref": "EC2InstanceProfile"
    },
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "t3.micro",
    "KeyName": "Projectdemo",
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "CHLBSecurityGroupD4E81CDE",
       "GroupId"
      ]
     }
    ],
    "SubnetId": "subnet-0646c4672d51c90c2",
    "Tags": [
     {
      "Key": "Name",
      "Value": "CHLB-LB"
     }
    ],
    "UserData": {
     "Fn::Base64": "#!/bin/bash -xe\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\nyum update -y || true\namazon-linux-extras enable python3.8 -y || true\nyum install -y python3 unzip amazon-cloudwatch-agent\npip3 install flask flask-cors 'flask-socketio==5.3.6' requests pymongo boto3 'urllib3<1.27'\ncat <<'EOF' > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json\n{\n  \"logs\": {\n    \"logs_collected\": {\n      \"files\": {\n        \"collect_list\": [\n          {\"file_path\": \"/home/ec2-user/lb.log\", \"log_group_name\": \"CHLB_LBLogs\", \"log_stream_name\": \"LoadBalancer\"},\n          {\"file_path\": \"/home/ec2-user/mongo_bootstrap.log\", \"log_group_name\": \"CHLB_LBLogs\", \"log_stream_name\": \"MongoBootstrap\"}\n        ]\n      }\n    }\n  }\n}\nEOF\n/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s\naws s3 cp s3://cdk-hnb659fds-assets-231545823700-us-east-1/e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e.zip /home/ec2-user/scripts.zip\ncd /home/ec2-user\nunzip -o scripts.zip\ncat <<'EOF' > /home/ec2-user/gen_config.py\n\nimport boto3, json\nregion = 'us-east-1'\nec2 = boto3.client('ec2', region_name=region)\nres = ec2.describe_instances(Filters=[{'Name':'tag:Role','Values':['CHLBBackend']},{'Name':'instance-state-name','Values':['running']}])\nservers = []\nfor r in res['Reservations']:\n    for i in r['Instances']:\n        ip = i.get('PrivateIpAddress')\n        name = next((t['Value'] for t in i.get('Tags',[]) if t['Key']=='Name'), 'Unknown')\n        servers.append({'name': name, 'ip': ip, 'port': 8080})\nconf = f\"servers = {json.dumps(servers)}\\nMONGODB_URI = 'mongodb+srv://ruchithpraharshab23_db_user:Ruchith%402005@ccproject.waghehd.mongodb.net/chlb?retryWrites=true&w=majority&appName=CCPROJECT'\\nLB_PORT = 5000\\n\"\nwith open('/home/ec2-user/config.py','w') as f:\n    f.write(conf)\nprint('WROTE CONFIG:', conf)\n\nEOF\npython3 /home/ec2-user/gen_config.py\nnohup python3 /home/ec2-user/mongo_bootstrap.py > /home/ec2-user/mongo_bootstrap.log 2>&1 &\nnohup python3 /home/ec2-user/lb.py > /home/ec2-user/lb.log 2>&1 &"
    }
   },
   "DependsOn": [
    "LBInstanceInstanceRole41DC12B8"
   ],
   "Metadata": {
    "aws:cdk:path": "CHLBStack/LBInstance/Resource"
   }
  },
  "LambdaExecRoleA88165BD": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/CloudWatchReadOnlyAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonS3ReadOnlyAccess"
       ]
      ]
     },
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/LambdaExecRole/Resource"
   }
  },
  "HealthCheckerLambda7309016B": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-231545823700-us-east-1",
     "S3Key": "e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e.zip"
    },
    "Environment": {
     "Variables": {
      "MONGODB_URI": "mongodb+srv://ruchithpraharshab23_db_user:Ruchith%402005@ccproject.waghehd.mongodb.net/chlb?retryWrites=true&w=majority&appName=CCPROJECT",
      "LB_IP": {
       "Fn::GetAtt": [
        "LBInstance138DE3A0",
        "PrivateIp"
       ]
      }
     }
    },
    "Handler": "health_checker.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaExecRoleA88165BD",
      "Arn"
     ]
    },
    "Runtime": "python3.10",
    "Timeout": 30
   },
   "DependsOn": [
    "LambdaExecRoleA88165BD"
   ],
   "Metadata": {
    "aws:cdk:path": "CHLBStack/HealthCheckerLambda/Resource",
    "aws:asset:path": "asset.e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "WeightCalculatorLambda26DF1CD5": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-231545823700-us-east-1",
     "S3Key": "e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e.zip"
    },
    "Environment": {
     "Variables": {
      "MONGODB_URI": "mongodb+srv://ruchithpraharshab23_db_user:Ruchith%402005@ccproject.waghehd.mongodb.net/chlb?retryWrites=true&w=majority&appName=CCPROJECT",
      "LB_IP": {
       "Fn::GetAtt": [
        "LBInstance138DE3A0",
        "PrivateIp"
       ]
      }
     }
    },
    "Handler": "weight_calculator.lambda_handler",
    "Role": {
     "Fn::GetAtt": [
      "LambdaExecRoleA88165BD",
      "Arn"
     ]
    },
    "Runtime": "python3.10",
    "Timeout": 30
   },
   "DependsOn": [
    "LambdaExecRoleA88165BD"
   ],
   "Metadata": {
    "aws:cdk:path": "CHLBStack/WeightCalculatorLambda/Resource",
    "aws:asset:path": "asset.e3a9f8856c7b8d8da29860981b0027585f4aa284b97572d49f98621f23be8c6e",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "EveryMinuteRule15D85929": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": "rate(1 minute)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "HealthCheckerLambda7309016B",
        "Arn"
       ]
      },
      "Id": "Target0"
     },
     {
      "Arn": {
       "Fn::GetAtt": [
        "WeightCalculatorLambda26DF1CD5",
        "Arn"
       ]
      },
      "Id": "Target1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/EveryMinuteRule/Resource"
   }
  },
  "EveryMinuteRuleAllowEventRuleCHLBStackHealthCheckerLambda636A6D500D216EBF": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "HealthCheckerLambda7309016B",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "EveryMinuteRule15D85929",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/EveryMinuteRule/AllowEventRuleCHLBStackHealthCheckerLambda636A6D50"
   }
  },
  "EveryMinuteRuleAllowEventRuleCHLBStackWeightCalculatorLambdaA2A84BCA221724E9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "WeightCalculatorLambda26DF1CD5",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "EveryMinuteRule15D85929",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/EveryMinuteRule/AllowEventRuleCHLBStackWeightCalculatorLambdaA2A84BCA"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WOXU7DQAyEz9L3jaHJCSgSiKdGyQEqd+sWk/2p1l6qaLV3RwlUwNN8M7ZHbqFtt/C4wZs09jQ1jo9QRkU7mYEk5mTJ4E0OhWwLZSSbE+v8mmK+mudz+B+8BVEMlpbJnath9FCG6NZ41T46tvNif+m+36d4ZkfVSHdAEVKBp0WMdLDLdiLdoZBx6I8nhPKSg1WOYan4yz0lzyIcQzX0SUEFypB/fsiOajVr7ah44XBZTzChJ6W0mH3Wa9Zq+lnfY3joYNtBu/kQ5ibloOwJhm/9AgyDqyBCAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "CHLBStack/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amikernel510hvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "LBPublicIP": {
   "Value": {
    "Fn::GetAtt": [
     "LBInstance138DE3A0",
     "PublicIp"
    ]
   }
  },
  "BackendPrivateIPs": {
   "Value": {
    "Fn::Join": [
     "",
     [
      {
       "Fn::GetAtt": [
        "Backend1A3ACC892",
        "PrivateIp"
       ]
      },
      ",",
      {
       "Fn::GetAtt": [
        "Backend2A4DC1969",
        "PrivateIp"
       ]
      },
      ",",
      {
       "Fn::GetAtt": [
        "Backend317D5C7E7",
        "PrivateIp"
       ]
      }
     ]
    ]
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}